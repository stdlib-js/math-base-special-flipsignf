{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport SIGN_MASK from '@stdlib/constants-float32-sign-mask';\nimport toWord from '@stdlib/number-float32-base-to-word';\nimport fromWord from '@stdlib/number-float32-base-from-word';\n\n\n// MAIN //\n\n/**\n* Returns a single-precision floating-point number with the magnitude of `x` and the sign of `x*y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a single-precision floating-point number\n*\n* @example\n* var z = flipsignf( -3.0, 10.0 );\n* // returns -3.0\n*\n* @example\n* var z = flipsignf( -3.0, -1.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsignf( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = flipsignf( -3.0, -0.0 );\n* // returns 3.0\n*\n* @example\n* var z = flipsignf( -0.0, 1.0 );\n* // returns -0.0\n*\n* @example\n* var z = flipsignf( 0.0, -1.0 );\n* // returns -0.0\n*/\nfunction flipsignf( x, y ) {\n\tvar wx;\n\tvar wy;\n\n\tx = float64ToFloat32( x );\n\ty = float64ToFloat32( y );\n\n\t// Convert `x` and `y` to unsigned integers:\n\twx = toWord( x );\n\twy = toWord( y );\n\n\t// Leave only the sign bit of `y` turned on (if on):\n\twy &= SIGN_MASK;\n\n\t// Flip the sign bit of `x` only when the sign bit of `y` is on:\n\twx ^= wy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:\n\treturn fromWord( wx );\n}\n\n\n// EXPORTS //\n\nexport default flipsignf;\n"],"names":["flipsignf","x","y","wx","wy","float64ToFloat32","toWord","fromWord","SIGN_MASK"],"mappings":";;6ZA6DA,SAASA,EAAWC,EAAGC,GACtB,IAAIC,EACAC,EAgBJ,OAdAH,EAAII,EAAkBJ,GACtBC,EAAIG,EAAkBH,GAGtBC,EAAKG,EAAQL,GACbG,EAAKE,EAAQJ,GASNK,EAHPJ,GAHAC,GAAMI,EAOP"}